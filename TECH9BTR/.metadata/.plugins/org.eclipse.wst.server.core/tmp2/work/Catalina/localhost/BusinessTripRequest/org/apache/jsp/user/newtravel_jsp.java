/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-04-20 17:38:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class newtravel_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title></title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("		");
  
		    
			/* Date deptdate=new SimpleDateFormat("dd/MM/yyyy").parse("ddate");
        	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        	String parsedDate = formatter.format(deptdate); */
			/* String returndate = request.getParameter("rdate");
        	Date returndt =new SimpleDateFormat("YYYY-MM-DD").parse(returndate); 
        	String deptdate = request.getParameter("ddate");
        	Date deptdt=new SimpleDateFormat("YYYY-MM-DD").parse(deptdate); */
        	
        	
        	
        	/* String returndate = request.getParameter("rdate");
        	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        	Date returndt = sdf.parse(returndate);
        	
        	String departdate = request.getParameter("ddate");
        	SimpleDateFormat pdf = new SimpleDateFormat("dd/MM/yyyy");
        	Date departdt = pdf.parse(departdate); */
        	
        	/* Date returndate=new SimpleDateFormat("yyyy-MM-dd").parse(request.getParameter("rdate"));
        	Date deptdate=new SimpleDateFormat("yyyy-MM-dd").parse(request.getParameter("ddate")); */
        	
        	/* String returndate = (String) request.getParameter("rdate");
        	String deptdate = (String) request.getParameter("ddate");     	
        	
        	String pattern = "yyyy-MM-dd";
        	SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

        	String returndt = simpleDateFormat.format(returndate);
        	System.out.println(returndt);
        	
        	String deptdt = simpleDateFormat.format(deptdate);
        	System.out.println(deptdt); */
        	
        	
        	
        	String sid=(String)session.getAttribute("uid");
        	String deptdate = request.getParameter("ddate");
        	String returndate = request.getParameter("rdate");
			String deptcountry = request.getParameter("dtcountry");
			String destcity = request.getParameter("dcity");
			String destaddr = request.getParameter("d_addr");
			String destcountry = request.getParameter("dcountry");
			String destpc = request.getParameter("postal");
			String currency = request.getParameter("currency");
			String estcost = request.getParameter("ecost");
			String advamt = request.getParameter("advance"); 
			String accomod = request.getParameter("accomodation");
			String tpurpose=request.getParameter("purpose");
			try
			{
				Connection connection = null;
			    Class.forName("oracle.jdbc.driver.OracleDriver");
			    connection = DriverManager.getConnection("jdbc:oracle:thin:@132.145.42.131:1521/Testdb_pdb1.evopaassub1.evopaasvcn.oraclevcn.com","trainee_schema","Trn__Schema_21");
				Statement statement = connection.createStatement();
				String command = "INSERT into BATCH9BTR_TRIP_DETAILS(user_id,trip_purpose_id,depart_date,return_date,depart_country,dest_addr,dest_city,dest_country,dest_postal_code,currency,est_cost,adv_amt,accomodation) values("+sid+",'"+tpurpose+"','"+deptdate+"','"+returndate+"','"+deptcountry+"','"+destaddr+"','"+destcity+"','"+destcountry+"','"+destpc+"','"+currency+"',"+estcost+","+advamt+",'"+accomod+"')";
			    statement.executeUpdate(command);
			    
			    String query = "Select Trip_id from batch9btr_trip_details where user_id = '"+sid+"' Order by trip_id DESC FETCH FIRST ROW ONLY";
				Statement st = connection.createStatement();
				ResultSet tr = st.executeQuery(query);
				tr.next();
				String tid = tr.getString("trip_id");
				String pen = "pending";
				
				String commandl1 = "INSERT into BATCH9BTR_APPROVAL_L1(user_id,trip_id,approval_status) values(2,'"+tid+"','"+pen+"')";
				String commandl2 = "INSERT into BATCH9BTR_APPROVAL_L2(user_id,trip_id,approval_status) values(3,'"+tid+"','"+pen+"')";
				String commandl3 = "INSERT into BATCH9BTR_APPROVAL_L3(user_id,trip_id,approval_status) values(4,'"+tid+"','"+pen+"')";
				st.executeUpdate(commandl1);
				st.executeUpdate(commandl2);
				st.executeUpdate(commandl3);
				

			    out.println("<script type=\"text/javascript\">");
	            out.println("alert('Request Successfully Submitted!');");
	            out.println("window.location.href = \"user-new-trip.jsp\";");
	            out.println("</script>");
				out.println("Data is successfully inserted!");
			    
			}
			catch(Exception e)
			{
			System.out.print(e);
			e.printStackTrace();
			}
		
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
